<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://localhost:4000/</link>
    <description></description>
    <pubDate>Sat, 25 Mar 2017 14:24:45 -0400</pubDate>
    
      <item>
        <title>Stratifying the Target Variable for Multi-Linear Regression</title>
        <link>http://localhost:4000/2017/03/24/stratify-continuous-variable.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/24/stratify-continuous-variable.html</guid>
        <description>&lt;p&gt;Sometimes when creating a multi-linear regression model, it’s wise to stratify the &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; (target) variable when you split your training and testing data from the total sample (train/test/split).  Why would we do this?  If you have &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; data that is not normally distributed, you may have a situation where your random samples of your sample might not be sufficiently representative of the sample.  Meta!&lt;/p&gt;

&lt;p&gt;In other words, you could have a situation where your training and/or testing sets (which are samples taken from your overall sample) look meaningfully different from the overall sample.  If that were the case, you run the risk of having a “garbage in, garbage out” situation, and your model may perform poorly.&lt;/p&gt;

&lt;p&gt;Stratifying is a common way to address this.  Essentially, stratifying is a way to ensure your ostensibly random sample is a representative sample.&lt;/p&gt;

&lt;p&gt;Usually, this comes into play for categorical variables.  In simple terms, the procedure is to sample in such a way that a representative selection from all categories are included in the training and testing sets.&lt;/p&gt;

&lt;p&gt;To do this in Python using pandas and scikit-learn:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

# Create training and testing samples from dataset df, with 30% allocated to the testing sample (as is customary):

X_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.3, stratify=y)

# The last argument `stratify` tells the function to stratify the target variable `y` so that the random sample is more representative of the full sample when `y`.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;BUT–what do we do if your &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; is a continuous numerical variable, rather than a categorical variable?  Turns out that if we try the same syntax above, it throws an error.  This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;train_test_split&lt;/code&gt; doesn’t know how to split up the sample unless you tell it what the “categories” are.&lt;/p&gt;

&lt;p&gt;After a lot of time querying google, stackoverflow, and others more experienced than me, here’s a solution I found.  The method is to trick Python into interpreting your continuous numerical &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; variable as a categorical variable instead.  How?  By creating bins, and passing your &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; variable into an ndarray containing those bins and the corresponding values.&lt;/p&gt;

&lt;p&gt;In Python (with same libraries loaded as in the prior code snippet):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Create the bins.  My `y` variable has 506 observations, and I want 50 bins.
bins = np.linspace(0, 506, 50)
# Save your Y values in a new ndarray, broken down by the bins created above.
y_binned = np.digitize(y, bins)
# Pass y_binned to the stratify argument, and sklearn will handle the rest
X_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.3, stratify=y_binned)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There you have it: stratification of a continuous numerical target value for multi-linear regression!&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Mar 2017 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>First post: setting up the blog</title>
        <link>http://localhost:4000/2017/03/11/first-post.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/11/first-post.html</guid>
        <description>&lt;p&gt;I wasn’t sure what to write about for my first post, but setting up this site has been a fun learning experience–so I’ll write about that.  Keep in mind this site and post are still works in progress.  While it might not be best practice to draft and iterate on the public facing site, I am doing it anyway :)  Break stuff and fix it, right?&lt;/p&gt;

&lt;p&gt;I’m using Github’s free &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; service to host this site, and I’ve installed &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, which, among other things, lets me create a local web server so I can review my new posts and edits locally (from a branch of the master) before committing it to the live master branch.  Setting all this up took some research, but it’s relatively straightforward if you have at lest some knowledge of Git, Github, CLI, and HTML.&lt;/p&gt;

&lt;p&gt;Github Pages lets you use HTML of course, but because the service relies on Jekyll, you can also write your pages and blog posts in Markdown and the service will essentially convert it to HTML.  Markdown is great for making relatively presentable/formatted text content quickly and easily.&lt;/p&gt;

&lt;p&gt;I’m not interested in spending a lot of time in HTML, so being able to write everything in Markdown is appealing.  In truth, so far I’ve spent a lot more time messing around with style sheets than I would have liked. But hopefully this only required for the setup stage, and soon I can stick to Markdown.&lt;/p&gt;

&lt;p&gt;Before I committed to this setup, however, I wanted to see how hard it would be to embed rich content in my posts from other sites.  For example, it’s pretty useful to embed things like Tableau dashboards and other visualizations when you’re blogging about data and data science.&lt;/p&gt;

&lt;p&gt;After a deep trip down the Google rabbit hole, I found the simple answer that was staring me in the face:  Just copy the iframe code (which websites will generate for you when you click the “embed” button next to a video, etc.) and copy it straight into your Markdown file.  No special syntax needed. &lt;facepalm&gt;&lt;/facepalm&gt;&lt;/p&gt;

&lt;p&gt;Here’s a very simple Tableau dashboard I made using some data on US SAT scores:&lt;/p&gt;

&lt;iframe src=&quot;https://public.tableau.com/views/testhistogram/Sheet1?:embed=y&amp;amp;:display_count=yes&quot; width=&quot;645&quot; height=&quot;955&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;To accomplish this, I simply pasted the following code in my Markdown file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;iframe src=&quot;https://public.tableau.com/views/testhistogram/Sheet1?:embed=y&amp;amp;:display_count=yes&quot;  width=&quot;645&quot; height=&quot;955&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Why not try the same with a YouTube video? (Couldn’t help myself, given that I’m working on my blog…)&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZXsQAXx_ao0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Here’s the embed code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZXsQAXx_ao0&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hope you enjoyed this.  More to come soon!&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 00:00:00 -0500</pubDate>
      </item>
    
  </channel>
</rss>
